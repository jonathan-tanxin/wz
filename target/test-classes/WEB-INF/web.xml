<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" 
	xmlns="http://java.sun.com/xml/ns/j2ee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	
	<context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:META-INF/applicationContext.xml
            classpath:META-INF/applicationContext-security.xml
        </param-value>
    </context-param>
	
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	
	<!-- 如果没有定义这个listener，那么你在登陆之后点登出，然后再登陆，就会发生有趣的事情。-->
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener> 
	
	<listener>
		<listener-class>com.daxia.wz.web.listener.MySessionListener</listener-class>
	</listener>
	
	<servlet>
		<servlet-name>main</servlet-name>
		<servlet-class>com.daxia.wz.web.MyDispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>main</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<servlet>       
	  <servlet-name>DruidStatView</servlet-name>     
	  <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>  
	</servlet>   
	<servlet-mapping>     
	   <servlet-name>DruidStatView</servlet-name>  
	   <url-pattern>/druid/*</url-pattern>  
	 </servlet-mapping>   
	
	 <filter>
		<filter-name>DruidWebStatFilter</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
		<init-param>
			<param-name>exclusions</param-name>
			<param-value>/res/*,/druid/*,/admin/login,/wsadmin/login,/dev/login</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>DruidWebStatFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- <servlet>
		<servlet-name>main</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>main</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping> -->
	
	<!-- utf-8 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<!-- 如果没有这个，则返回的json结果中文会出现乱码 -->
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> 
	
	<!-- 路径过滤 -->
	<filter>
		<filter-name>contextFilter</filter-name>
		<filter-class>com.daxia.wz.web.filter.ContextFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>contextFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>merchantLoginFilter</filter-name>
		<filter-class>com.daxia.wz.web.filter.MerchantLoginFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>merchantLoginFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>devLoginFilter</filter-name>
		<filter-class>com.daxia.wz.web.filter.DevLoginFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>devLoginFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 允许在每次的整个request的过程中使用同一个hibernate session,可以在这个request任何时期lazy loading数据。 -->
	<filter>
		<filter-name>openSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>openSessionInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 
		安全过滤器链
		所以它没有与任何特定的web技术强行关联。 
		它只管处理HttpServletRequest 和HttpServletResponse，不关心请求时来自浏览器，web服务客户端，HttpInvoker还是一个AJAX应用。
	  -->
	<filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
      <filter-name>springSecurityFilterChain</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>
	
	<!-- 
	不需要这个filter，如果加上了这个，就解析不了上传文件的request
	<filter>
		<filter-name>multipartFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>multipartFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> -->

	<filter>
		<filter-name>hiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>hiddenHttpMethodFilter</filter-name>
		<servlet-name>/*</servlet-name> 
	</filter-mapping>
	
	<!-- <filter>
		<filter-name>sitemeshFilter</filter-name>
		<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemeshFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> -->
	
	<session-config>
      <session-timeout>180</session-timeout>
	 </session-config>
	 
	<error-page>
		<error-code>403</error-code>
		<location>/403.html</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/404.html</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/500.html</location>
	</error-page>
	<welcome-file-list>
		<welcome-file>/index.jsp</welcome-file>
	</welcome-file-list>
</web-app>
